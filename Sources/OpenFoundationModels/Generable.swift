// Generable.swift
// OpenFoundationModels
//
// ‚úÖ CONFIRMED: Based on Apple Foundation Models API specification

import Foundation

/// Protocol for types that can be generated by a language model
/// 
/// ‚úÖ CONFIRMED: Apple specification from documentation
/// - Inherits from ConvertibleFromGeneratedContent, ConvertibleToGeneratedContent
/// - Also inherits from InstructionsRepresentable, PromptRepresentable, SendableMetatype  
/// - Uses GenerationSchema (NOT JSONSchema)
/// - Has PartiallyGenerated associated type for streaming
public protocol Generable: ConvertibleFromGeneratedContent, ConvertibleToGeneratedContent, Sendable {
    /// The generation schema for this type
    /// ‚úÖ CONFIRMED: Property name is generationSchema, NOT schema
    static var generationSchema: GenerationSchema { get }
    
    /// Associated type for partially generated content
    /// ‚úÖ CONFIRMED: Required for streaming support
    associatedtype PartiallyGenerated: ConvertibleFromGeneratedContent = Self
    
    /// Convert to partially generated representation
    /// ‚úÖ CONFIRMED: Required method for streaming
    func asPartiallyGenerated() -> Self.PartiallyGenerated
}

// MARK: - Protocol Implementation
// All required methods are provided by the @Generable macro:
// - init(_:) for ConvertibleFromGeneratedContent.from(generatedContent:)
// - generatedContent for ConvertibleToGeneratedContent.toGeneratedContent()
// - generationSchema static property
// - asPartiallyGenerated() method

// MARK: - Legacy JSONSchema (INCOMPATIBLE - TO BE REMOVED)
// üö® WARNING: Apple does NOT use JSONSchema
// The following types are incompatible with Apple's API and will be removed:

/// ‚ö†Ô∏è DEPRECATED: Apple uses GenerationSchema, not JSONSchema
/// This type will be removed in favor of Apple's GenerationSchema
public struct JSONSchema: Sendable {
    public let type: SchemaType
    public let properties: [String: JSONSchema]?
    public let required: [String]?
    public let items: Box<JSONSchema>?
    public let description: String?
    public let constraints: SchemaConstraints?
    
    public init(
        type: SchemaType,
        properties: [String: JSONSchema]? = nil,
        required: [String]? = nil,
        items: JSONSchema? = nil,
        description: String? = nil,
        constraints: SchemaConstraints? = nil
    ) {
        self.type = type
        self.properties = properties
        self.required = required
        self.items = items.map(Box.init)
        self.description = description
        self.constraints = constraints
    }
}

/// ‚ö†Ô∏è DEPRECATED: Used only by legacy JSONSchema
public final class Box<T>: @unchecked Sendable {
    public let value: T
    public init(_ value: T) { self.value = value }
}

/// ‚ö†Ô∏è DEPRECATED: Apple schema types are different
public enum SchemaType: String, Sendable {
    case object, array, string, number, integer, boolean, null
}

/// ‚ö†Ô∏è DEPRECATED: Apple constraint system is different
public struct SchemaConstraints: Sendable {
    public let minimum: Double?
    public let maximum: Double?
    public let pattern: String?
    public let minLength: Int?
    public let maxLength: Int?
    public let enumValues: [String]?
    
    public init(minimum: Double? = nil, maximum: Double? = nil, pattern: String? = nil,
                minLength: Int? = nil, maxLength: Int? = nil, enumValues: [String]? = nil) {
        self.minimum = minimum; self.maximum = maximum; self.pattern = pattern
        self.minLength = minLength; self.maxLength = maxLength; self.enumValues = enumValues
    }
}