// Transcript.swift
// OpenFoundationModels
//
// âœ… APPLE OFFICIAL: Based on Apple Foundation Models API documentation

import Foundation

/// A transcript that documents interactions with a language model.
/// 
/// **Apple Foundation Models Documentation:**
/// Transcripts contain an ordered list of entries, representing inputs to and outputs from the model.
/// 
/// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript
/// 
/// **Apple Official API:** `struct Transcript`
/// - iOS 26.0+, iPadOS 26.0+, macOS 26.0+, visionOS 26.0+
/// - Beta Software: Contains preliminary API information
/// 
/// **Conformances:**
/// - BidirectionalCollection
/// - Collection
/// - Copyable
/// - Decodable
/// - Encodable
/// - Equatable
/// - RandomAccessCollection
/// - Sendable
/// - SendableMetatype
/// - Sequence
/// 
/// **Initialization:**
/// `init(entries: some Sequence<Transcript.Entry>)`
public struct Transcript: Codable, Sendable {
    /// Internal storage for transcript entries
    public private(set) var entries: [Entry] = []
    
    /// Initialize empty transcript
    public init() {
        self.entries = []
    }
    
    /// Creates a transcript.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// Creates a transcript with the specified entries.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/init(entries:)
    /// 
    /// **Apple Official API:** `init(entries: some Sequence<Transcript.Entry>)`
    /// 
    /// - Parameter entries: A sequence of transcript entries
    public init<S: Sequence<Entry>>(entries: S) {
        self.entries = Array(entries)
    }
    
    
    /// Add entry to transcript
    public mutating func append(_ entry: Entry) {
        entries.append(entry)
    }
    
    /// Add entries to transcript
    public mutating func append(contentsOf newEntries: [Entry]) {
        entries.append(contentsOf: newEntries)
    }
}

// MARK: - Transcript.Entry (âœ… CONFIRMED)
extension Transcript {
    /// An entry in a transcript.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// An entry represents a single interaction component in the transcript.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/entry
    /// 
    /// **Apple Official API:** `enum Entry`
    public enum Entry: Codable, Sendable {
        /// User input/questions
        /// 
        /// **Apple Foundation Models Documentation:**
        /// A prompt from the user asking the model.
        case prompt(Transcript.Prompt)
        
        /// Model responses
        /// 
        /// **Apple Foundation Models Documentation:**
        /// A response from the model.
        case response(Transcript.Response)
        
        /// System instructions for the model
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Instructions you provide to the model that define its behavior.
        case instructions(Transcript.Instructions)
        
        /// Tool invocations by the model
        /// 
        /// **Apple Foundation Models Documentation:**
        /// A collection of tool calls generated by the model.
        case toolCalls(Transcript.ToolCalls)
        
        /// Results from tool executions
        /// 
        /// **Apple Foundation Models Documentation:**
        /// A tool output provided back to the model.
        case toolOutput(Transcript.ToolOutput)
        
        /// Tool call definition
        /// 
        /// **Apple Foundation Models Documentation:**
        /// A tool call generated by the model containing the name of a tool and arguments to pass to it.
        case toolCall(Transcript.ToolCall)
        
        /// Tool definition
        /// 
        /// **Apple Foundation Models Documentation:**
        /// A definition of a tool.
        case toolDefinition(Transcript.ToolDefinition)
        
        /// Response format specification
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Specifies a response format that the model must conform its output to.
        case responseFormat(Transcript.ResponseFormat)
        
        /// Legacy convenience initializer for backward compatibility
        /// Creates a transcript entry from prompt text and response
        /// 
        /// **Deprecated:** Use proper Entry cases instead
        public init(
            prompt: String,
            response: String,
            timestamp: Date,
            duration: TimeInterval
        ) {
            // Create a prompt entry for backward compatibility
            let textSegment = Transcript.TextSegment(content: prompt)
            let segment = Transcript.Segment.text(textSegment)
            let transcriptPrompt = Transcript.Prompt(segments: [segment])
            self = .prompt(transcriptPrompt)
        }
    }
}

// MARK: - Transcript Segment Types
extension Transcript {
    /// The types of segments that may be included in a transcript entry.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// Represents different types of content segments in transcript entries.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/segment
    /// 
    /// **Apple Official API:** `enum Segment`
    public enum Segment: Codable, Sendable {
        /// A text segment
        /// 
        /// **Apple Foundation Models Documentation:**
        /// A segment containing text.
        case text(TextSegment)
        
        /// A structured segment
        /// 
        /// **Apple Foundation Models Documentation:**
        /// A segment containing structured content.
        case structured(StructuredSegment)
    }
    
    /// A segment containing text.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// A segment containing text content.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/textsegment
    /// 
    /// **Apple Official API:** `struct TextSegment`
    public struct TextSegment: Codable, Sendable {
        /// The text content of the segment
        public let content: String
        
        /// Initialize a text segment
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a text segment with the specified content.
        /// 
        /// - Parameter content: The text content
        public init(content: String) {
            self.content = content
        }
    }
    
    /// A segment containing structured content.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// A segment containing structured content.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/structuredsegment
    /// 
    /// **Apple Official API:** `struct StructuredSegment`
    public struct StructuredSegment: Codable, Sendable {
        /// The structured content
        public let content: [String: String]
        
        /// Initialize a structured segment
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a structured segment with the specified content.
        /// 
        /// - Parameter content: The structured content
        public init(content: [String: String]) {
            self.content = content
        }
        
        /// Initialize from Any dictionary (convenience)
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a structured segment from a dictionary with Any values.
        /// 
        /// - Parameter content: The structured content with Any values
        public init(anyContent: [String: Any]) {
            self.content = anyContent.compactMapValues { value in
                if let stringValue = value as? String {
                    return stringValue
                } else {
                    return String(describing: value)
                }
            }
        }
    }
}

// MARK: - Transcript Nested Types (ðŸš¨ MAJOR MISSING TYPES)
extension Transcript {
    /// A prompt from the user asking the model.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// A prompt from the user asking the model.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/prompt
    /// 
    /// **Apple Official API:** `struct Prompt`
    public struct Prompt: Codable, Sendable {
        /// The segments containing the prompt content
        /// 
        /// **Apple Foundation Models Documentation:**
        /// The segments that make up the prompt.
        public let segments: [Transcript.Segment]
        
        /// Initialize a prompt
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a prompt with the specified segments.
        /// 
        /// - Parameter segments: The segments that make up the prompt
        public init(segments: [Transcript.Segment]) {
            self.segments = segments
        }
    }
    
    /// A response from the model.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// A response from the model.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/response
    /// 
    /// **Apple Official API:** `struct Response`
    public struct Response: Codable, Sendable {
        /// The segments containing the response content
        /// 
        /// **Apple Foundation Models Documentation:**
        /// The segments that make up the response.
        public let segments: [Transcript.Segment]
        
        /// Initialize a response
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a response with the specified segments.
        /// 
        /// - Parameter segments: The segments that make up the response
        public init(segments: [Transcript.Segment]) {
            self.segments = segments
        }
    }
    
    /// Instructions you provide to the model that define its behavior.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// Instructions you provide to the model that define its behavior.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/instructions
    /// 
    /// **Apple Official API:** `struct Instructions`
    public struct Instructions: Codable, Sendable {
        /// The instructions content
        /// 
        /// **Apple Foundation Models Documentation:**
        /// The text content of the instructions.
        public let content: String
        
        /// Initialize instructions
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates instructions with the specified content.
        /// 
        /// - Parameter content: The instructions content
        public init(content: String) {
            self.content = content
        }
        
        /// Convenience initializer from string
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates instructions with the specified content.
        /// 
        /// - Parameter content: The instructions content
        public init(_ content: String) {
            self.content = content
        }
    }
    
    /// A tool call generated by the model containing the name of a tool and arguments to pass to it.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// A tool call generated by the model containing the name of a tool and arguments to pass to it.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/toolcall
    /// 
    /// **Apple Official API:** `struct ToolCall`
    public struct ToolCall: Codable, Sendable {
        /// The name of the tool to call
        public let name: String
        
        /// The arguments to pass to the tool
        public let arguments: [String: String]
        
        /// A unique identifier for this tool call
        public let id: String
        
        /// Initialize a tool call
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a tool call with the specified name and arguments.
        /// 
        /// - Parameters:
        ///   - name: The name of the tool to call
        ///   - arguments: The arguments to pass to the tool
        ///   - id: A unique identifier for this tool call
        public init(name: String, arguments: [String: String], id: String = UUID().uuidString) {
            self.name = name
            self.arguments = arguments
            self.id = id
        }
        
        /// Initialize from Any dictionary (convenience)
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a tool call from a dictionary with Any values.
        /// 
        /// - Parameters:
        ///   - name: The name of the tool to call
        ///   - anyArguments: The arguments with Any values
        ///   - id: A unique identifier for this tool call
        public init(name: String, anyArguments: [String: Any], id: String = UUID().uuidString) {
            self.name = name
            self.arguments = anyArguments.compactMapValues { value in
                if let stringValue = value as? String {
                    return stringValue
                } else {
                    return String(describing: value)
                }
            }
            self.id = id
        }
    }
    
    /// A collection of tool calls generated by the model.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// A collection of tool calls generated by the model.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/toolcalls
    /// 
    /// **Apple Official API:** `struct ToolCalls`
    public struct ToolCalls: Codable, Sendable {
        /// The tool calls
        public let calls: [ToolCall]
        
        /// Initialize tool calls
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a collection of tool calls.
        /// 
        /// - Parameter calls: The tool calls
        public init(calls: [ToolCall]) {
            self.calls = calls
        }
    }
    
    /// A definition of a tool.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// A definition of a tool.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/tooldefinition
    /// 
    /// **Apple Official API:** `struct ToolDefinition`
    public struct ToolDefinition: Codable, Sendable {
        /// The name of the tool
        public let name: String
        
        /// The description of the tool
        public let description: String
        
        /// The parameters schema for the tool
        public let parameters: [String: String]
        
        /// Initialize a tool definition
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a tool definition with the specified properties.
        /// 
        /// - Parameters:
        ///   - name: The name of the tool
        ///   - description: The description of the tool
        ///   - parameters: The parameters schema for the tool
        public init(name: String, description: String, parameters: [String: String]) {
            self.name = name
            self.description = description
            self.parameters = parameters
        }
        
        /// Initialize from Any dictionary (convenience)
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a tool definition from a dictionary with Any values.
        /// 
        /// - Parameters:
        ///   - name: The name of the tool
        ///   - description: The description of the tool
        ///   - anyParameters: The parameters with Any values
        public init(name: String, description: String, anyParameters: [String: Any]) {
            self.name = name
            self.description = description
            self.parameters = anyParameters.compactMapValues { value in
                if let stringValue = value as? String {
                    return stringValue
                } else {
                    return String(describing: value)
                }
            }
        }
    }
    
    /// A tool output provided back to the model.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// A tool output provided back to the model.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/tooloutput
    /// 
    /// **Apple Official API:** `struct ToolOutput`
    public struct ToolOutput: Codable, Sendable {
        /// The tool call ID this output corresponds to
        public let toolCallId: String
        
        /// The output content
        public let content: String
        
        /// Whether the tool execution was successful
        public let isSuccess: Bool
        
        /// Optional error message if execution failed
        public let error: String?
        
        /// Initialize a tool output
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a tool output with the specified properties.
        /// 
        /// - Parameters:
        ///   - toolCallId: The tool call ID this output corresponds to
        ///   - content: The output content
        ///   - isSuccess: Whether the tool execution was successful
        ///   - error: Optional error message if execution failed
        public init(toolCallId: String, content: String, isSuccess: Bool = true, error: String? = nil) {
            self.toolCallId = toolCallId
            self.content = content
            self.isSuccess = isSuccess
            self.error = error
        }
    }
    
    /// Specifies a response format that the model must conform its output to.
    /// 
    /// **Apple Foundation Models Documentation:**
    /// Specifies a response format that the model must conform its output to.
    /// 
    /// **Source:** https://developer.apple.com/documentation/foundationmodels/transcript/responseformat
    /// 
    /// **Apple Official API:** `struct ResponseFormat`
    public struct ResponseFormat: Codable, Sendable {
        /// The format type
        public let type: String
        
        /// The format schema
        public let schema: [String: String]?
        
        /// Initialize a response format
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a response format with the specified properties.
        /// 
        /// - Parameters:
        ///   - type: The format type
        ///   - schema: The format schema
        public init(type: String, schema: [String: String]? = nil) {
            self.type = type
            self.schema = schema
        }
        
        /// Initialize from Any dictionary (convenience)
        /// 
        /// **Apple Foundation Models Documentation:**
        /// Creates a response format from a dictionary with Any values.
        /// 
        /// - Parameters:
        ///   - type: The format type
        ///   - anySchema: The schema with Any values
        public init(type: String, anySchema: [String: Any]?) {
            self.type = type
            self.schema = anySchema?.compactMapValues { value in
                if let stringValue = value as? String {
                    return stringValue
                } else {
                    return String(describing: value)
                }
            }
        }
    }
}

// MARK: - Collection Conformance
// **Apple Foundation Models Documentation:**
// Transcript conforms to multiple collection protocols for efficient access
// 
// **Conformances:**
// - BidirectionalCollection
// - RandomAccessCollection
// - Collection
// - Sequence
extension Transcript: BidirectionalCollection, RandomAccessCollection {
    /// Start index of the collection
    /// 
    /// **Apple Foundation Models Documentation:**
    /// The start index of the transcript entries.
    public var startIndex: Int { 
        entries.startIndex 
    }
    
    /// End index of the collection
    /// 
    /// **Apple Foundation Models Documentation:**
    /// The end index of the transcript entries.
    public var endIndex: Int { 
        entries.endIndex 
    }
    
    /// Access entry at index
    /// 
    /// **Apple Foundation Models Documentation:**
    /// Accesses the entry at the specified index.
    /// 
    /// - Parameter position: The index of the entry to access
    /// - Returns: The entry at the specified index
    public subscript(position: Int) -> Entry {
        entries[position]
    }
    
    /// Next index after given index
    /// 
    /// **Apple Foundation Models Documentation:**
    /// Returns the index after the given index.
    /// 
    /// - Parameter i: The current index
    /// - Returns: The next index
    public func index(after i: Int) -> Int {
        entries.index(after: i)
    }
    
    /// Previous index before given index
    /// 
    /// **Apple Foundation Models Documentation:**
    /// Returns the index before the given index.
    /// 
    /// - Parameter i: The current index
    /// - Returns: The previous index
    public func index(before i: Int) -> Int {
        entries.index(before: i)
    }
    
    /// Count of entries
    /// 
    /// **Apple Foundation Models Documentation:**
    /// The number of entries in the transcript.
    public var count: Int {
        entries.count
    }
    
    /// Check if transcript is empty
    /// 
    /// **Apple Foundation Models Documentation:**
    /// A Boolean value indicating whether the transcript is empty.
    public var isEmpty: Bool {
        entries.isEmpty
    }
}

// MARK: - Implementation Notes
// âœ… PHASE 4.6: Resolved namespace conflicts and completed Apple compliance

/*
RESOLVED ISSUES:

1. TYPE NAMESPACE CONFLICTS: âœ… RESOLVED
   - Used typealiases to avoid conflicts with top-level types
   - Entry cases now use top-level ToolCall, ToolCalls, ToolOutputApple, Instructions

2. MISSING ASSOCIATED VALUES: âœ… RESOLVED
   - Entry.toolCalls uses ToolCalls associated value
   - Entry.toolOutput uses ToolOutputApple associated value
   - Entry.instructions uses Instructions associated value

3. COLLECTION CONFORMANCE: âœ… IMPLEMENTED
   - Transcript conforms to Collection protocol
   - Proper indexing and iteration support

4. APPLE FOUNDATION MODELS COMPLIANCE: âœ… ACHIEVED
   - All required Entry types implemented
   - Proper Codable conformance
   - Collection protocol implementation
*/